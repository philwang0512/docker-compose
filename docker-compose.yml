version: "3.7"
services:
  db:                                                   # 可以隨意命名，通常以有意義的字串命名
    image: mysql                                        # 服務容器，若無指定版號表示使用 latest 版本， alpine 容器佔用空間較小，通常建議使用
    restart: always                                     # 當container crash 時，會自動重啟。
    container_name: mysql                               # 指容器名稱，這裡比較不同的是指令使用「--name」，但在yml應該使用「container_name」
    environment:                                        # 提供參數至容器內部，docker 指令是使用「-e 或者 --env」，但在yml應該使用「environment」
      MYSQL_USER: eb103
      MYSQL_PASSWORD: eb103
      MYSQL_ROOT_PASSWORD: eb103
      MYSQL_DATABASE: eb103
    ports:
      - 3306:3306
    #deploy:                                            #限制容器的資源
    #  resources:
    #    limits:
    #      cpus: '0.2'
    #      memory: 200M
    volumes:                                            # 掛載的撰寫方式，如果有多組不同路徑掛載，只需要在新增幾行條件即可。
      - "/e/docker/mysql/data/db:/var/lib/mysql"        #mysql数据库挂载到host物理机目录/e/docker/mysql/data/db 
      - "/e/docker/mysql/data/conf:/etc/mysql/conf.d"   #容器的配置目录挂载到host物理机目录/e/docker/mysql/data/conf 
    
      
  redis:     
    image: redis:alpine 
    container_name: redis 
    restart: always           
    ports:
        - 6379:6379
    volumes:                          
        - /data/redis-data:/data      
    
      
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    restart: always
    
 
  kafka:
    image: wurstmeister/kafka:2.11-0.11.0.3
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: 18.183.192.197
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ec2-18-183-192-197.ap-northeast-1.compute.amazonaws.com:9092
      KAFKA_CREATE_TOPICS: "test3"
      KAFKA_BROKER_ID: 1
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"   #限制容器的資源
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always 
    
    
  
      
  spark-master:
    image: jfliu211/spark:2.4.5v2
    container_name: spark-master
    hostname: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - default
    environment:
      - "SPARK_LOCAL_IP=spark-master"
      - "SPARK_MASTER_PORT=7077"
      - "SPARK_MASTER_WEBUI_PORT=8080"
    command: "/start-master.sh"
    restart: always
    
    
  spark-worker:
    image: jfliu211/spark:2.4.5v2
    container_name: spark-worker
    depends_on:
      - spark-master
    ports:
      - 8080
    networks:
      - default
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SPARK_WORKER_WEBUI_PORT=8080"
    entrypoint: "/start-worker.sh"
    volumes:
      - "./:/local"
    restart: always
    

        
  flask-chatbot:
    build:
      context: .
      dockerfile: dockerfile
    container_name: chatbot
    ports:
      - "5000:5000"
    environment:
      line_channel_access_token: '+Vd83SQouFeSZ6tIy+qOHTRTowXOT89yCoY6yFjP3GLKUs6Vrpgo+2BUQqfLzeTChJWNrUdv+VKhG7GGhKp+CWKFv17g20ifmRiXqFxzA3VJiNcB5hKobxQKtE2KgJ/TSgwsOH4XfEHYh+L+cm7QwAdB04t89/1O/w1cDnyilFU='
      line_channel_secret: 'd813e14583917bfa40a968db16259eb3'
      TZ: 'Asia/Taipei'
    volumes:
      - .:/app
    command: python a.py                       # command 表示啟動容器後預備執行的動作
    

  ngrok:
    image: wernight/ngrok
    ports:
      - "4040:4040"
    container_name: ngrok
    environment:
      NGROK_AUTH: '1jtii1PAm9Ffrmit835m8URKYoL_4FkkHcJeCAAryQyDGXf8q'
      NGROK_USERNAME: 'philwang09@yahoo.com.tw'
      NGROK_PASSWORD: 'philwang09'
      NGROK_PORT: flask-chatbot:5000
      NGROK_REGION: 'ap'
      TZ: 'Asia/Taipei'
    depends_on:
      - flask-chatbot
    

